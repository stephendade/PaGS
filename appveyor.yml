# branches to build
branches:
  # whitelist
  only:
    - master

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

environment:
  COVERALLS_REPO_TOKEN:
    secure: nawPdszJTzIQ4ZSOlJIUcg8VdWOT+da4eB/VKuF6eUTK502B6dNIw+R2DA4OJxWc
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: C:\Python37
      PYTHON_VERSION: 3.7
      PYTHON_ARCH: 32

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: C:\Python36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: C:\Python38
      PYTHON_VERSION: 3.8
      PYTHON_ARCH: 32

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      PYTHON_VERSION: "3.8"
      PYTHONPATH: "/home/appveyor/.local/lib/python3.8/site-packages/"

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      PYTHON_VERSION: "3.6"
      PYTHONPATH: "/home/appveyor/.local/lib/python3.6/site-packages/"

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      PYTHON_VERSION: "3.7"
      PYTHONPATH: "/home/appveyor/.local/lib/python3.7/site-packages/"

stack: python %PYTHON_VERSION%

init:
  - echo %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%
  - echo \"%APPVEYOR_SCHEDULED_BUILD%\"

cache:
  # Cache downloaded pip packages and built wheels.
  - '%LOCALAPPDATA%\pip\Cache\http'
  - '%LOCALAPPDATA%\pip\Cache\wheels'
  
  # Linux
  - '$HOME/.cache/pip/wheels'
  - '$HOME/.cache/pip/http'

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
          
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - cmd: SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Configure headless CI for Linux. From https://electronjs.org/docs/tutorial/testing-on-headless-ci
  - sh: sudo apt-get install -y xvfb
  - sh: export DISPLAY=':99.0'
  - sh: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  
  # COM to TCP for serial port testing
  # Based on https://github.com/Apollon77/SupportingFiles/blob/master/README_SERIAL_TESTING.md
  - cmd: dir "C:\Program Files (x86)\Windows Kits\10\bin\x64"
  - cmd: dir "C:\Program Files (x86)\Windows Kits\10\bin\x86"
  - cmd: dir "C:\Program Files (x86)\Windows Kits\10\bin\selfsign"
  - ps: |
      if ($isLinux) {
        Write-Host "This is Linux!"
      } else {
        C:\"Program Files (x86)"\"Windows Kits"\10\bin\10.0.19041.0\x64\certmgr.exe /add .\tests\support\com0com.cer /s /r localMachine root
        C:\"Program Files (x86)"\"Windows Kits"\10\bin\10.0.19041.0\x64\certmgr.exe /add .\tests\support\com0com.cer /s /r localMachine trustedpublisher
        $env:CNC_INSTALL_CNCA0_CNCB0_PORTS="YES"
        .\tests\support\setup_com0com_W7_x64_signed.exe /S
        sleep 10
      }
  - sh: sudo apt install -y socat libsdl2-2.0-0
  
  #Using pip install wxpython on Linux takes waaay too long, so downloading precompiled version instead
  - sh: pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04 wxPython

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import sys, platform, struct;
    print(sys.platform, platform.machine(), struct.calcsize('P')*8)"

  # Upgrade to the latest pip.
  - python -m pip install -U pip setuptools wheel

  # Install the PyInstaller test dependencies.
  - pip install -U -r requirements.txt -r requirements_gui.txt -r ./tests/requirements_test.txt

  # For CI - Coveralls.io
  - pip install -U coveralls

before_build:
  # fail the build if there are Python syntax errors or undefined names
  - flake8 ./PaGS --count --ignore=E501,E402,W504 --show-source --statistics --max-line-length=127
  - flake8 ./tests --count --ignore=E501,E402,W504 --show-source --statistics --max-line-length=127

build_script:
  # Build and install PaGS
  - python setup.py build install --user

test_script:
  # Run pytest
  - python -m pytest --log-level DEBUG --junitxml=out_report.xml --cov=PaGS

  # Upload coverage to coveralls, only if the var is defined
  - ps: if ($env:COVERALLS_REPO_TOKEN)
        {
         iex coveralls
        }

on_finish:
# upload test results to AppVeyor
- ps: |
    $wc = New-Object 'System.Net.WebClient'
    $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\out_report.xml))


